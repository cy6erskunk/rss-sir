---
import Parser from "rss-parser";

interface Props {
  sources?: string[];
}

const oneDayAgo = new Date();
oneDayAgo.setDate(oneDayAgo.getDate() - 1);
oneDayAgo.setHours(0, 0, 0, 0);

const parser = new Parser();

const {
  sources = [
    "https://simonwillison.net/atom/everything/",
    "https://developer.mozilla.org/en-US/blog/rss.xml",
  ],
} = Astro.props;

interface FeedItem {
  feed?: string;
  title?: string;
  link?: string;
  date?: Date;
  summary?: string;
}

const feedItems: FeedItem[] = [];

await Promise.allSettled(
  sources.map(async (source) => {
    try {
      const feed = await parser.parseURL(source);
      feed.items.forEach((item) => {
        const date = item.pubDate ? new Date(item.pubDate) : undefined;

        if (date && date >= oneDayAgo) {
          feedItems.push({
            feed: feed.title,
            title: item.title,
            link: item.link,
            date,
            summary: item.summary || item.content || item.description,
          });
        }
      });
    } catch (error) {
      console.error(`Error fetching feed from ${source}:`, error);
    }
  }),
);

const sortedFeedItems = feedItems.sort(
  (a, b) => (b.date ?? new Date()).getTime() - (a.date ?? new Date()).getTime(),
);
---

<main class="container">
  <div class="feed-list">
    {
      sortedFeedItems.map((item) => (
        <article class="feed-item">
          <header class="feed-header">
            <div class="feed-title">{item.feed}</div>
            <time class="feed-date">{item.date}</time>
          </header>
          <h2 class="item-title">
            <a href={item.link}>{item.title}</a>
          </h2>
          <div class="item-summary" set:html={item.summary} />
        </article>
      ))
    }
  </div>
</main>

<style>
  .container {
    max-width: var(--max-width);
    margin: 0 auto;
  }

  .feed-list {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    margin-bottom: 2rem;
  }

  .feed-item {
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius);
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    transition: transform 0.2s ease;
  }

  .feed-header {
    padding: 1rem;
    background-color: var(--color-primary);
    color: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .feed-title {
    font-size: 1rem;
    font-weight: 600;
  }

  .feed-date {
    font-size: 0.875rem;
    color: rgba(255, 255, 255, 0.9);
  }

  .item-title {
    font-size: 1.25rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    color: var(--color-text);
    padding: 1rem 1rem 0 1rem;
  }

  .item-title a {
    color: inherit;
    text-decoration: none;
  }

  .item-title a:hover {
    text-decoration: underline;
  }

  .item-summary {
    padding: 0 1rem 1rem 1rem;
    color: var(--color-text);
    overflow-wrap: break-word;
    word-wrap: break-word;
  }

  .item-summary :global(a) {
    color: var(--color-link);
    text-decoration: none;
  }

  .item-summary :global(a:hover) {
    color: var(--color-link-hover);
    text-decoration: underline;
  }

  .item-summary :global(p) {
    margin-bottom: 1rem;
  }

  .item-summary :global(p:last-child) {
    margin-bottom: 0;
  }

  .item-summary :global(img) {
    max-width: 100%;
    height: auto;
    border-radius: 4px;
    margin: 1rem 0;
  }

  .item-summary :global(pre) {
    background-color: var(--color-code-bg);
    padding: 1rem;
    border-radius: 4px;
    overflow-x: auto;
    font-family: var(--font-mono);
    font-size: 0.875rem;
    line-height: 1.7;
    margin: 1rem 0;
  }

  .item-summary :global(code) {
    font-family: var(--font-mono);
    font-size: 0.875rem;
    background-color: var(--color-code-bg);
    padding: 0.2rem 0.4rem;
    border-radius: 4px;
  }

  .item-summary :global(blockquote) {
    background-color: var(--color-quote-bg);
    border-left: 4px solid var(--color-quote-border);
    padding: 1rem;
    margin: 1rem 0;
    border-radius: 0 4px 4px 0;
    font-style: italic;
  }

  .item-summary :global(blockquote p:last-child) {
    margin-bottom: 0;
  }

  .item-summary :global(ul),
  .item-summary :global(ol) {
    margin: 1rem 0;
    padding-left: 1.5rem;
  }

  .item-summary :global(li) {
    margin-bottom: 0.5rem;
  }

  @media (max-width: 640px) {
    .feed-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }

    .item-title {
      font-size: 1.125rem;
    }
  }
</style>
